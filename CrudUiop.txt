// interfaces.ts
import Realm from 'realm';

export interface ArcAnalysis extends Realm.Object {
  id: string;
  documentversion?: string | null;
  organizationId: string;
  locationId: string;
  siteId?: string | null;
  jobId?: string | null;
  arcopertiontype: string;
  status: string;
  startapptimestamp: number;
  endapptimestamp: number;
  createdby: string;
  createdwhen: Date;
  modifiedby: string;
  modifiedwhen: Date;
  equipmentinfo: EquipmentInfo;
  ppecategoryresult?: any;
  arccalcresult: ArcCalcResult;
  isdeleted: boolean;
  message: string;
  sasToken: string;
}

export interface EquipmentInfo extends Realm.Object {
  Id: string;
  name: string;
  description?: string | null;
  location: string;
  equipmentdetails: EquipmentDetails;
}

export interface EquipmentDetails extends Realm.Object {
  systemtype: string;
  type: string;
  systemratedvolt: number;
  systemratedvolt_unit: string;
  faultcurrent: number;
  faultcurrent_unit: string;
  faultclearingtime: number;
  faultclearingtime_unit: string;
  measurementtype: string;
  workingdistance: number;
  workingdistance_unit: string;
  arcduration: number;
  arcduration_unit: string;
  enclosurewidth: number;
  enclosurewidth_unit: string;
  enclosureheight: number;
  enclosureheight_unit: string;
  enclosuredepth: number;
  enclosuredepth_unit: string;
  electrodeconfiguration: string;
  electrodegap: number;
  electrodegap_unit: string;
  isratedlessthan200?: boolean | null;
}

export interface ArcCalcResult extends Realm.Object {
  cf: number;
  normal_arccurrentresult: ArcCurrentResult;
  reduce_arccurrentresult: ArcCurrentResult;
}

export interface ArcCurrentResult extends Realm.Object {
  intemidate_arccurrresultvalues: IntermediateArcCurrResultValues;
  intemidate_incidentenergyresultvalues: IntermediateIncidentEnergyResultValues;
  intermidate_arcflashboundaryresultvalues: IntermediateArcFlashBoundaryResultValues;
  arc_current: string;
  ppecategorystd?: any;
  arc_flashboundary: string;
  arc_incidentenergy: string;
  arc_time: string;
  ppebylocation: PpeByLocation;
}

export interface IntermediateArcCurrResultValues extends Realm.Object {
  iarc: string;
  iarc_14300: string;
  iarc_2700: string;
  iarc_600: string;
  correctionfactor?: any;
}

export interface IntermediateIncidentEnergyResultValues extends Realm.Object {
  i_energy?: any;
  i_e14300?: any;
  I_e2700?: any;
  i_e600?: any;
}

export interface IntermediateArcFlashBoundaryResultValues extends Realm.Object {
  afb: string;
  afb_14300: string;
  iarc_2700?: any;
  iarc_600?: any;
}

export interface PpeByLocation extends Realm.Object {
  ppecategory?: any;
  incidentenergyrange: string;
  clothings: string;
}

// Required by Realm
export const ArcAnalysisSchema: Realm.ObjectSchema = {
  name: 'ArcAnalysis',
  primaryKey: 'id',
  properties: {
    id: 'string',
    documentversion: 'string?',
    organizationId: 'string',
    locationId: 'string',
    siteId: 'string?',
    jobId: 'string?',
    arcopertiontype: 'string',
    status: 'string',
    startapptimestamp: 'int',
    endapptimestamp: 'int',
    createdby: 'string',
    createdwhen: 'date',
    modifiedby: 'string',
    modifiedwhen: 'date',
    equipmentinfo: 'EquipmentInfo',
    ppecategoryresult: 'mixed',
    arccalcresult: 'ArcCalcResult',
    isdeleted: 'bool',
    message: 'string',
    sasToken: 'string'
  }
};

export const EquipmentInfoSchema: Realm.ObjectSchema = {
  name: 'EquipmentInfo',
  properties: {
    Id: 'string',
    name: 'string',
    description: 'string?',
    location: 'string',
    equipmentdetails: 'EquipmentDetails'
  }
};

export const EquipmentDetailsSchema: Realm.ObjectSchema = {
  name: 'EquipmentDetails',
  properties: {
    systemtype: 'string',
    type: 'string',
    systemratedvolt: 'int',
    systemratedvolt_unit: 'string',
    faultcurrent: 'int',
    faultcurrent_unit: 'string',
    faultclearingtime: 'int',
    faultclearingtime_unit: 'string',
    measurementtype: 'string',
    workingdistance: 'int',
    workingdistance_unit: 'string',
    arcduration: 'int',
    arcduration_unit: 'string',
    enclosurewidth: 'int',
    enclosurewidth_unit: 'string',
    enclosureheight: 'int',
    enclosureheight_unit: 'string',
    enclosuredepth: 'int',
    enclosuredepth_unit: 'string',
    electrodeconfiguration: 'string',
    electrodegap: 'int',
    electrodegap_unit: 'string',
    isratedlessthan200: 'bool?'
  }
};

export const ArcCalcResultSchema: Realm.ObjectSchema = {
  name: 'ArcCalcResult',
  properties: {
    cf: 'int',
    normal_arccurrentresult: 'ArcCurrentResult',
    reduce_arccurrentresult: 'ArcCurrentResult'
  }
};

export const ArcCurrentResultSchema: Realm.ObjectSchema = {
  name: 'ArcCurrentResult',
  properties: {
    intemidate_arccurrresultvalues: 'IntermediateArcCurrResultValues',
    intemidate_incidentenergyresultvalues: 'IntermediateIncidentEnergyResultValues',
    intermidate_arcflashboundaryresultvalues: 'IntermediateArcFlashBoundaryResultValues',
    arc_current: 'string',
    ppecategorystd: 'mixed',
    arc_flashboundary: 'string',
    arc_incidentenergy: 'string',
    arc_time: 'string',
    ppebylocation: 'PpeByLocation'
  }
};

export const IntermediateArcCurrResultValuesSchema: Realm.ObjectSchema = {
  name: 'IntermediateArcCurrResultValues',
  properties: {
    iarc: 'string',
    iarc_14300: 'string',
    iarc_2700: 'string',
    iarc_600: 'string',
    correctionfactor: 'mixed'
  }
};

export const IntermediateIncidentEnergyResultValuesSchema: Realm.ObjectSchema = {
  name: 'IntermediateIncidentEnergyResultValues',
  properties: {
    i_energy: 'mixed',
    i_e14300: 'mixed',
    I_e2700: 'mixed',
    i_e600: 'mixed'
  }
};

export const IntermediateArcFlashBoundaryResultValuesSchema: Realm.ObjectSchema = {
  name: 'IntermediateArcFlashBoundaryResultValues',
  properties: {
    afb: 'string',
    afb_14300: 'string',
    iarc_2700: 'mixed',
    iarc_600: 'mixed'
  }
};

export const PpeByLocationSchema: Realm.ObjectSchema = {
  name: 'PpeByLocation',
  properties: {
    ppecategory: 'mixed',
    incidentenergyrange: 'string',
    clothings: 'string'
  }
};



// realmConfig.ts
import Realm from 'realm';
import {
  ArcAnalysisSchema,
  EquipmentInfoSchema,
  EquipmentDetailsSchema,
  ArcCalcResultSchema,
  ArcCurrentResultSchema,
  IntermediateArcCurrResultValuesSchema,
  IntermediateIncidentEnergyResultValuesSchema,
  IntermediateArcFlashBoundaryResultValuesSchema,
  PpeByLocationSchema
} from './interfaces';

const realmConfig: Realm.Configuration = {
  schema: [
    ArcAnalysisSchema,
    EquipmentInfoSchema,
    EquipmentDetailsSchema,
    ArcCalcResultSchema,
    ArcCurrentResultSchema,
    IntermediateArcCurrResultValuesSchema,
    IntermediateIncidentEnergyResultValuesSchema,
    IntermediateArcFlashBoundaryResultValuesSchema,
    PpeByLocationSchema
  ],
  schemaVersion: 1,
  migration: (oldRealm, newRealm) => {
    // Perform migration if needed
  }
};

export default realmConfig;



// RealmDatabase.ts
import Realm from 'realm';
import realmConfig from './realmConfig';
import {
  ArcAnalysis,
  EquipmentInfo,
  EquipmentDetails,
  ArcCalcResult,
  ArcCurrentResult,
  IntermediateArcCurrResultValues,
  IntermediateIncidentEnergyResultValues,
  IntermediateArcFlashBoundaryResultValues,
  PpeByLocation
} from './interfaces';

class RealmDatabase {
  private static instance: RealmDatabase;
  private realm: Realm;

  private constructor() {
    this.realm = new Realm(realmConfig);
  }

  public static getInstance(): RealmDatabase {
    if (!RealmDatabase.instance) {
      RealmDatabase.instance = new RealmDatabase();
    }
    return RealmDatabase.instance;
  }

  public createObject<T extends Realm.Object>(schemaName: string, data: Partial<T>): void {
    this.realm.write(() => {
      this.realm.create<T>(schemaName, data as T);
    });
  }

  public getObject<T extends Realm.Object>(schemaName: string, primaryKey: string): T | undefined {
    const result = this.realm.objectForPrimaryKey<T>(schemaName, primaryKey);
    return result ? JSON.parse(JSON.stringify(result)) : undefined;
  }

  public getAllObjects<T extends Realm.Object>(schemaName: string): T[] {
    return this.realm.objects<T>(schemaName).map(obj => JSON.parse(JSON.stringify(obj)));
  }

  public updateObject<T extends Realm.Object>(schemaName: string, primaryKey: string, data: Partial<T>): void {
    this.realm.write(() => {
      const obj = this.realm.objectForPrimaryKey<T>(schemaName, primaryKey);
      if (obj) {
        Object.assign(obj, data);
      }
    });
  }

  public deleteObject<T extends Realm.Object>(schemaName: string, primaryKey: string): void {
    this.realm.write(() => {
      const obj = this.realm.objectForPrimaryKey<T>(schemaName, primaryKey);
      if (obj) {
        this.realm.delete(obj);
      }
    });
  }

  public deleteAllObjects<T extends Realm.Object>(schemaName: string): void {
    this.realm.write(() => {
      const allObjects = this.realm.objects<T>(schemaName);
      this.realm.delete(allObjects);
    });
  }

  public close(): void {
    if (!this.realm.isClosed) {
      this.realm.close();
    }
  }
}

export default RealmDatabase;




// app.tsx
import React, { useEffect } from 'react';
import RealmDatabase from './RealmDatabase';
import { ArcAnalysis } from './interfaces';

const App = () => {
  useEffect(() => {
    const realmDb = RealmDatabase.getInstance();

    // Example: Create an object
    const newArcAnalysis: Partial<ArcAnalysis> = {
      id: '1',
      documentversion: '1.0',
      organizationId: 'org123',
      locationId: 'loc123',
      arcopertiontype: 'type1',
      status: 'active',
      startapptimestamp: Date.now(),
      endapptimestamp: Date.now(),
      createdby: 'user1',
      createdwhen: new Date(),
      modifiedby: 'user1',
      modifiedwhen: new Date(),
      equipmentinfo: {
        Id: 'equip1',
        name: 'Equipment 1',
        location: 'Location 1',
        equipmentdetails: {
          systemtype: 'type1',
          type: 'type1',
          systemratedvolt: 240,
          systemratedvolt_unit: 'V',
          faultcurrent: 10,
          faultcurrent_unit: 'A',
          faultclearingtime: 2,
          faultclearingtime_unit: 's',
          measurementtype: 'type1',
          workingdistance: 1,
          workingdistance_unit: 'm',
          arcduration: 2,
          arcduration_unit: 's',
          enclosurewidth: 1,
          enclosurewidth_unit: 'm',
          enclosureheight: 2,
          enclosureheight_unit: 'm',
          enclosuredepth: 3,
          enclosuredepth_unit: 'm',
          electrodeconfiguration: 'config1',
          electrodegap: 4,
          electrodegap_unit: 'mm',
          isratedlessthan200: true
        }
      },
      arccalcresult: {
        cf: 1,
        normal_arccurrentresult: {
          intemidate_arccurrresultvalues: {
            iarc: '1',
            iarc_14300: '1',
            iarc_2700: '1',
            iarc_600: '1'
          },
          intemidate_incidentenergyresultvalues: {
            i_energy: 'energy',
            i_e14300: 'energy',
            I_e2700: 'energy',
            i_e600: 'energy'
          },
          intermidate_arcflashboundaryresultvalues: {
            afb: 'afb',
            afb_14300: 'afb',
            iarc_2700: 'afb',
            iarc_600: 'afb'
          },
          arc_current: 'current',
          arc_flashboundary: 'boundary',
          arc_incidentenergy: 'energy',
          arc_time: 'time',
          ppebylocation: {
            incidentenergyrange: 'range',
            clothings: 'clothing'
          }
        },
        reduce_arccurrentresult: {
          intemidate_arccurrresultvalues: {
            iarc: '1',
            iarc_14300: '1',
            iarc_2700: '1',
            iarc_600: '1'
          },
          intemidate_incidentenergyresultvalues: {
            i_energy: 'energy',
            i_e14300: 'energy',
            I_e2700: 'energy',
            i_e600: 'energy'
          },
          intermidate_arcflashboundaryresultvalues: {
            afb: 'afb',
            afb_14300: 'afb',
            iarc_2700: 'afb',
            iarc_600: 'afb'
          },
          arc_current: 'current',
          arc_flashboundary: 'boundary',
          arc_incidentenergy: 'energy',
          arc_time: 'time',
          ppebylocation: {
            incidentenergyrange: 'range',
            clothings: 'clothing'
          }
        }
      },
      isdeleted: false,
      message: 'message',
      sasToken: 'token'
    };

    realmDb.createObject<ArcAnalysis>('ArcAnalysis', newArcAnalysis);

    // Example: Get an object
    const arcAnalysis = realmDb.getObject<ArcAnalysis>('ArcAnalysis', '1');
    console.log('Fetched ArcAnalysis:', arcAnalysis);

    // Example: Update an object
    realmDb.updateObject<ArcAnalysis>('ArcAnalysis', '1', { status: 'completed' });

    // Example: Delete an object
    realmDb.deleteObject<ArcAnalysis>('ArcAnalysis', '1');

    // Clean up
    return () => {
      realmDb.close();
    };
  }, []);

  return (
    <div>
      <h1>Realm Database Example</h1>
    </div>
  );
};

export default App;


